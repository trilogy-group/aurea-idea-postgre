package com.niprdataservice;

/*
 * Copyright (c) 2004-2014 by Aurea, Inc. All Rights Reserved.
 * All use, reproduction, transfer, publication or disclosure is prohibited
 * except as may be expressly permitted in the applicable license agreement.
 *
 *  THIS FILE IS GENERATED.  DO NOT EDIT THIS FILE DIRECTLY.
 */



import com.pantero.runtime.lock.LockSupervisor;
import com.pantero.runtime.dataservice.DataServiceEntityDelegate;
import com.nipr.schema.Result;
import com.nipr.schema.Getter;
import com.nipr.schema.Gateway;

public class NIPRDataService extends DataServiceEntityDelegate {

	public NIPRDataService() {
		super("NIPRDataService");
	}
	

	/*
	 * Delegating method to GetNPN on NIPRDataService
	 */
	public Result GetNPN(
 			final Getter Parameter1) {
		final NIPRDataServiceImpl _dataservice = new NIPRDataServiceImpl(getConfigurationName("GetNPN"));
		initialize(_dataservice);
		Result _result = null;
		try {
			_result = (Result)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetNPN(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetNPN", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetInformation on NIPRDataService
	 */
	public Result GetInformation(
 			final Getter Parameter1) {
		final NIPRDataServiceImpl _dataservice = new NIPRDataServiceImpl(getConfigurationName("GetInformation"));
		initialize(_dataservice);
		Result _result = null;
		try {
			_result = (Result)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetInformation(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetInformation", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to UpdateAppointment on NIPRDataService
	 */
	public Gateway UpdateAppointment(
 			final Gateway Parameter1) {
		final NIPRDataServiceImpl _dataservice = new NIPRDataServiceImpl(getConfigurationName("UpdateAppointment"));
		initialize(_dataservice);
		Gateway _result = null;
		try {
			_result = (Gateway)new LockSupervisor() {
				public Object execute() {
					return _dataservice.UpdateAppointment(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "UpdateAppointment", _result, true);
		}
		return _result;
	}
}
