package com.ds;

/*
 * Copyright (c) 2004-2014 by Aurea, Inc. All Rights Reserved.
 * All use, reproduction, transfer, publication or disclosure is prohibited
 * except as may be expressly permitted in the applicable license agreement.
 *
 *  THIS FILE IS GENERATED.  DO NOT EDIT THIS FILE DIRECTLY.
 */



import com.pantero.runtime.lock.LockSupervisor;
import com.pantero.runtime.dataservice.DataServiceEntityDelegate;
import com.ipm.Error;
import com.partyinformation.Insert;
import com.partyinformation.UpdateParty;
import com.ipm.OrganizationResponse;
import com.ipm.PartyRequest;
import com.ipm.PartyResponse;
import com.ipm.PaymentAccountResponse;
import com.ipm.PaymentAccountRequest;
import com.ipm.PersonResponse;
import com.ipm.PositionResponse;
import com.ipm.PositionRequest;
import com.ipm.TransactionResponse;
import com.ipm.TransactionRequest;
import com.ipm.UserResponse;
import com.partyinformation.Update;
import com.ipm.EmailResponse;
import com.ipm.EmailRequest;
import com.ipm.AgreementParticipantResponse;
import com.ipm.AgreementParticipantRequest;
import com.ipm.AppointmentResponse;
import com.ipm.AppointmentRequest;
import com.ipm.NPNResponse;
import com.ipm.NPNRequest;
import com.ipm.DownloadUpdateFromPDBResponse;
import com.ipm.DownloadUpdateFromPDBRequest;
import com.ipm.ContactPointResponse;
import com.ipm.ContactPointRequest;
import com.ipm.LicenseResponse;
import com.ipm.LicenseRequest;
import com.ipm.ContactPointUsageResponse;
import com.ipm.ContactPointUsageRequest;
import com.ipm.RegulatoryActionResponse;
import com.ipm.RegulatoryActionRequest;
import com.ipm.CorrespondenceEmailRequest;
import com.ipm.NIPRDetailsForAppointmentResponse;
import com.ipm.NIPRDetailsForAppointmentRequest;
import com.ipm.checkPartyRecontractabilityResponse;
import com.ipm.checkPartyRecontractabilityRequest;
import com.ipm.Cancelledin90daysResponse;
import com.ipm.Cancelledin90daysRequest;
import com.ipm.EOAndBCWaivedResponse;
import com.ipm.EOAndBCWaivedRequest;
import com.ipm.OtherCompanyAppointmentsResponse;
import com.ipm.OtherCompanyAppointmentsRequest;
import com.ipm.APIDForCaseResponse;
import com.ipm.APIDForCaseRequest;
import com.ipm.ChildPositionTypeResponse;
import com.ipm.ChildPositionTypeRequest;
import com.ipm.ErrorAndOmissionResponse;
import com.ipm.ErrorAndOmissionRequest;
import com.ipm.PaymentAccountsResponse;
import com.ipm.PaymentAccountsRequest;
import com.ipm.SubmitBackgroundCheckResponse;
import com.ipm.SubmitBackgroundCheckRequest;
import com.ipm.BackgroundCheckResponse;
import com.ipm.BackgroundCheckResponseRequest;
import com.ipm.setupDCMDataResponse;
import com.ipm.setupDCMDataRequest;
import com.ipm.HierarchyPositionResponse;
import com.ipm.HierarchyPositionRequest;
import com.ipm.PositionDetailedResponse;
import com.ipm.PositionDetailedRequest;
import com.ipm.FIAgreementsResponse;
import com.ipm.FIAgreementsRequest;
import com.ipm.UplinePartyResponse;
import com.ipm.UplinePartyRequest;
import com.ipm.ChannelEligibilityResponse;
import com.ipm.PartyChannelEligibilityRequest;
import com.ipm.ActiveProductProfileResponse;
import com.ipm.ActiveProductProfileRequest;
import com.ipm.LOAResponse;
import com.ipm.LOARequest;
import com.ipm.PartyStatusReason;
import com.ipm.PartyStatusRequest;
import com.ipm.RootAPPartyResponse;
import com.ipm.RootAPPartyRequest;
import com.ipm.OrgPrincipalAlerts;
import com.ipm.OrgPrincipalCreateRequest;
import com.ipm.OrgPrincipalResponse;
import com.ipm.OrgPrincipalRequest;

public class IPMDataService extends DataServiceEntityDelegate {

	public IPMDataService() {
		super("IPMDataService");
	}
	

	/*
	 * Delegating method to Insert on IPMDataService
	 */
	public Error Insert(
 			final Insert Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("Insert"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.Insert(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "Insert", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to UpdateParty on IPMDataService
	 */
	public Error UpdateParty(
 			final UpdateParty Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("UpdateParty"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.UpdateParty(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "UpdateParty", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetOrganizations on IPMDataService
	 */
	public OrganizationResponse GetOrganizations(
 			final PartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetOrganizations"));
		initialize(_dataservice);
		OrganizationResponse _result = null;
		try {
			_result = (OrganizationResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetOrganizations(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetOrganizations", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPartyInformation on IPMDataService
	 */
	public PartyResponse GetPartyInformation(
 			final PartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPartyInformation"));
		initialize(_dataservice);
		PartyResponse _result = null;
		try {
			_result = (PartyResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPartyInformation(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPartyInformation", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPaymentAccountUpdates on IPMDataService
	 */
	public PaymentAccountResponse GetPaymentAccountUpdates(
 			final PaymentAccountRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPaymentAccountUpdates"));
		initialize(_dataservice);
		PaymentAccountResponse _result = null;
		try {
			_result = (PaymentAccountResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPaymentAccountUpdates(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPaymentAccountUpdates", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPersons on IPMDataService
	 */
	public PersonResponse GetPersons(
 			final PartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPersons"));
		initialize(_dataservice);
		PersonResponse _result = null;
		try {
			_result = (PersonResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPersons(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPersons", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPositions on IPMDataService
	 */
	public PositionResponse GetPositions(
 			final PositionRequest request) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPositions"));
		initialize(_dataservice);
		PositionResponse _result = null;
		try {
			_result = (PositionResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPositions(
 							request);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPositions", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetTransactions on IPMDataService
	 */
	public TransactionResponse GetTransactions(
 			final TransactionRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetTransactions"));
		initialize(_dataservice);
		TransactionResponse _result = null;
		try {
			_result = (TransactionResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetTransactions(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetTransactions", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetUserInformation on IPMDataService
	 */
	public UserResponse GetUserInformation(
 			final PartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetUserInformation"));
		initialize(_dataservice);
		UserResponse _result = null;
		try {
			_result = (UserResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetUserInformation(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetUserInformation", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to Update on IPMDataService
	 */
	public Error Update(
 			final Update Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("Update"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.Update(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "Update", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to ValidateForInsert on IPMDataService
	 */
	public Error ValidateForInsert(
 			final Insert Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("ValidateForInsert"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.ValidateForInsert(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "ValidateForInsert", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to ValidateForUpdate on IPMDataService
	 */
	public Error ValidateForUpdate(
 			final Update Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("ValidateForUpdate"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.ValidateForUpdate(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "ValidateForUpdate", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to ValidateForUpdateParty on IPMDataService
	 */
	public Error ValidateForUpdateParty(
 			final UpdateParty Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("ValidateForUpdateParty"));
		initialize(_dataservice);
		Error _result = null;
		try {
			_result = (Error)new LockSupervisor() {
				public Object execute() {
					return _dataservice.ValidateForUpdateParty(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "ValidateForUpdateParty", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetAgencyEmailsForAgent on IPMDataService
	 */
	public EmailResponse GetAgencyEmailsForAgent(
 			final EmailRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetAgencyEmailsForAgent"));
		initialize(_dataservice);
		EmailResponse _result = null;
		try {
			_result = (EmailResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetAgencyEmailsForAgent(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetAgencyEmailsForAgent", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetAgreementParticipants on IPMDataService
	 */
	public AgreementParticipantResponse GetAgreementParticipants(
 			final AgreementParticipantRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetAgreementParticipants"));
		initialize(_dataservice);
		AgreementParticipantResponse _result = null;
		try {
			_result = (AgreementParticipantResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetAgreementParticipants(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetAgreementParticipants", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetAgentEmailsForAgency on IPMDataService
	 */
	public EmailResponse GetAgentEmailsForAgency(
 			final EmailRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetAgentEmailsForAgency"));
		initialize(_dataservice);
		EmailResponse _result = null;
		try {
			_result = (EmailResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetAgentEmailsForAgency(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetAgentEmailsForAgency", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetAppointments on IPMDataService
	 */
	public AppointmentResponse GetAppointments(
 			final AppointmentRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetAppointments"));
		initialize(_dataservice);
		AppointmentResponse _result = null;
		try {
			_result = (AppointmentResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetAppointments(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetAppointments", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetNPNFromNIPR on IPMDataService
	 */
	public NPNResponse GetNPNFromNIPR(
 			final NPNRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetNPNFromNIPR"));
		initialize(_dataservice);
		NPNResponse _result = null;
		try {
			_result = (NPNResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetNPNFromNIPR(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetNPNFromNIPR", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to DownloadUpdateFromPDB on IPMDataService
	 */
	public DownloadUpdateFromPDBResponse DownloadUpdateFromPDB(
 			final DownloadUpdateFromPDBRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("DownloadUpdateFromPDB"));
		initialize(_dataservice);
		DownloadUpdateFromPDBResponse _result = null;
		try {
			_result = (DownloadUpdateFromPDBResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.DownloadUpdateFromPDB(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "DownloadUpdateFromPDB", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetContactPoints on IPMDataService
	 */
	public ContactPointResponse GetContactPoints(
 			final ContactPointRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetContactPoints"));
		initialize(_dataservice);
		ContactPointResponse _result = null;
		try {
			_result = (ContactPointResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetContactPoints(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetContactPoints", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPartyEmails on IPMDataService
	 */
	public EmailResponse GetPartyEmails(
 			final EmailRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPartyEmails"));
		initialize(_dataservice);
		EmailResponse _result = null;
		try {
			_result = (EmailResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPartyEmails(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPartyEmails", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetLicenses on IPMDataService
	 */
	public LicenseResponse GetLicenses(
 			final LicenseRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetLicenses"));
		initialize(_dataservice);
		LicenseResponse _result = null;
		try {
			_result = (LicenseResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetLicenses(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetLicenses", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetContactPointUsages on IPMDataService
	 */
	public ContactPointUsageResponse GetContactPointUsages(
 			final ContactPointUsageRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetContactPointUsages"));
		initialize(_dataservice);
		ContactPointUsageResponse _result = null;
		try {
			_result = (ContactPointUsageResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetContactPointUsages(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetContactPointUsages", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetRegulatoryAction on IPMDataService
	 */
	public RegulatoryActionResponse GetRegulatoryAction(
 			final RegulatoryActionRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetRegulatoryAction"));
		initialize(_dataservice);
		RegulatoryActionResponse _result = null;
		try {
			_result = (RegulatoryActionResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetRegulatoryAction(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetRegulatoryAction", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetCorrespondenceEmails on IPMDataService
	 */
	public EmailResponse GetCorrespondenceEmails(
 			final CorrespondenceEmailRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetCorrespondenceEmails"));
		initialize(_dataservice);
		EmailResponse _result = null;
		try {
			_result = (EmailResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetCorrespondenceEmails(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetCorrespondenceEmails", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetNIPRDetailsForAppointment on IPMDataService
	 */
	public NIPRDetailsForAppointmentResponse GetNIPRDetailsForAppointment(
 			final NIPRDetailsForAppointmentRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetNIPRDetailsForAppointment"));
		initialize(_dataservice);
		NIPRDetailsForAppointmentResponse _result = null;
		try {
			_result = (NIPRDetailsForAppointmentResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetNIPRDetailsForAppointment(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetNIPRDetailsForAppointment", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to CheckPartyRecontractability on IPMDataService
	 */
	public checkPartyRecontractabilityResponse CheckPartyRecontractability(
 			final checkPartyRecontractabilityRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("CheckPartyRecontractability"));
		initialize(_dataservice);
		checkPartyRecontractabilityResponse _result = null;
		try {
			_result = (checkPartyRecontractabilityResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.CheckPartyRecontractability(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "CheckPartyRecontractability", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to CheckCancelledin90days on IPMDataService
	 */
	public Cancelledin90daysResponse CheckCancelledin90days(
 			final Cancelledin90daysRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("CheckCancelledin90days"));
		initialize(_dataservice);
		Cancelledin90daysResponse _result = null;
		try {
			_result = (Cancelledin90daysResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.CheckCancelledin90days(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "CheckCancelledin90days", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to checkEOAndBCWaived on IPMDataService
	 */
	public EOAndBCWaivedResponse checkEOAndBCWaived(
 			final EOAndBCWaivedRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("checkEOAndBCWaived"));
		initialize(_dataservice);
		EOAndBCWaivedResponse _result = null;
		try {
			_result = (EOAndBCWaivedResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.checkEOAndBCWaived(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "checkEOAndBCWaived", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetOtherCompanyAppointments on IPMDataService
	 */
	public OtherCompanyAppointmentsResponse GetOtherCompanyAppointments(
 			final OtherCompanyAppointmentsRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetOtherCompanyAppointments"));
		initialize(_dataservice);
		OtherCompanyAppointmentsResponse _result = null;
		try {
			_result = (OtherCompanyAppointmentsResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetOtherCompanyAppointments(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetOtherCompanyAppointments", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetAPIDForCase on IPMDataService
	 */
	public APIDForCaseResponse GetAPIDForCase(
 			final APIDForCaseRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetAPIDForCase"));
		initialize(_dataservice);
		APIDForCaseResponse _result = null;
		try {
			_result = (APIDForCaseResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetAPIDForCase(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetAPIDForCase", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetChildPositionTypes on IPMDataService
	 */
	public ChildPositionTypeResponse GetChildPositionTypes(
 			final ChildPositionTypeRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetChildPositionTypes"));
		initialize(_dataservice);
		ChildPositionTypeResponse _result = null;
		try {
			_result = (ChildPositionTypeResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetChildPositionTypes(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetChildPositionTypes", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetErrorAndOmission on IPMDataService
	 */
	public ErrorAndOmissionResponse GetErrorAndOmission(
 			final ErrorAndOmissionRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetErrorAndOmission"));
		initialize(_dataservice);
		ErrorAndOmissionResponse _result = null;
		try {
			_result = (ErrorAndOmissionResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetErrorAndOmission(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetErrorAndOmission", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPaymentAccounts on IPMDataService
	 */
	public PaymentAccountsResponse GetPaymentAccounts(
 			final PaymentAccountsRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPaymentAccounts"));
		initialize(_dataservice);
		PaymentAccountsResponse _result = null;
		try {
			_result = (PaymentAccountsResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPaymentAccounts(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPaymentAccounts", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to SubmitBackgroundCheckRequest on IPMDataService
	 */
	public SubmitBackgroundCheckResponse SubmitBackgroundCheckRequest(
 			final SubmitBackgroundCheckRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("SubmitBackgroundCheckRequest"));
		initialize(_dataservice);
		SubmitBackgroundCheckResponse _result = null;
		try {
			_result = (SubmitBackgroundCheckResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.SubmitBackgroundCheckRequest(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "SubmitBackgroundCheckRequest", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetBackgroundCheckResponse on IPMDataService
	 */
	public BackgroundCheckResponse GetBackgroundCheckResponse(
 			final BackgroundCheckResponseRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetBackgroundCheckResponse"));
		initialize(_dataservice);
		BackgroundCheckResponse _result = null;
		try {
			_result = (BackgroundCheckResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetBackgroundCheckResponse(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetBackgroundCheckResponse", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to setupDCMData on IPMDataService
	 */
	public setupDCMDataResponse setupDCMData(
 			final setupDCMDataRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("setupDCMData"));
		initialize(_dataservice);
		setupDCMDataResponse _result = null;
		try {
			_result = (setupDCMDataResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.setupDCMData(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "setupDCMData", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetHierarchyPositionForWelcomeLetter on IPMDataService
	 */
	public HierarchyPositionResponse GetHierarchyPositionForWelcomeLetter(
 			final HierarchyPositionRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetHierarchyPositionForWelcomeLetter"));
		initialize(_dataservice);
		HierarchyPositionResponse _result = null;
		try {
			_result = (HierarchyPositionResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetHierarchyPositionForWelcomeLetter(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetHierarchyPositionForWelcomeLetter", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetPositionsDetailed on IPMDataService
	 */
	public PositionDetailedResponse GetPositionsDetailed(
 			final PositionDetailedRequest request) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetPositionsDetailed"));
		initialize(_dataservice);
		PositionDetailedResponse _result = null;
		try {
			_result = (PositionDetailedResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetPositionsDetailed(
 							request);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetPositionsDetailed", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetFIAgreements on IPMDataService
	 */
	public FIAgreementsResponse GetFIAgreements(
 			final FIAgreementsRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetFIAgreements"));
		initialize(_dataservice);
		FIAgreementsResponse _result = null;
		try {
			_result = (FIAgreementsResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetFIAgreements(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetFIAgreements", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetUplineParty on IPMDataService
	 */
	public UplinePartyResponse GetUplineParty(
 			final UplinePartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetUplineParty"));
		initialize(_dataservice);
		UplinePartyResponse _result = null;
		try {
			_result = (UplinePartyResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetUplineParty(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetUplineParty", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to CheckPartyChannelEligibility on IPMDataService
	 */
	public ChannelEligibilityResponse CheckPartyChannelEligibility(
 			final PartyChannelEligibilityRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("CheckPartyChannelEligibility"));
		initialize(_dataservice);
		ChannelEligibilityResponse _result = null;
		try {
			_result = (ChannelEligibilityResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.CheckPartyChannelEligibility(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "CheckPartyChannelEligibility", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetActiveProductProfiles on IPMDataService
	 */
	public ActiveProductProfileResponse GetActiveProductProfiles(
 			final ActiveProductProfileRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetActiveProductProfiles"));
		initialize(_dataservice);
		ActiveProductProfileResponse _result = null;
		try {
			_result = (ActiveProductProfileResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetActiveProductProfiles(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetActiveProductProfiles", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetLoaData on IPMDataService
	 */
	public LOAResponse GetLoaData(
 			final LOARequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetLoaData"));
		initialize(_dataservice);
		LOAResponse _result = null;
		try {
			_result = (LOAResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetLoaData(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetLoaData", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to GetLastStatusReason on IPMDataService
	 */
	public PartyStatusReason GetLastStatusReason(
 			final PartyStatusRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("GetLastStatusReason"));
		initialize(_dataservice);
		PartyStatusReason _result = null;
		try {
			_result = (PartyStatusReason)new LockSupervisor() {
				public Object execute() {
					return _dataservice.GetLastStatusReason(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "GetLastStatusReason", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to CheckRootApParty on IPMDataService
	 */
	public RootAPPartyResponse CheckRootApParty(
 			final RootAPPartyRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("CheckRootApParty"));
		initialize(_dataservice);
		RootAPPartyResponse _result = null;
		try {
			_result = (RootAPPartyResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.CheckRootApParty(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "CheckRootApParty", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to InsertOrgPrincipalRelation on IPMDataService
	 */
	public OrgPrincipalAlerts InsertOrgPrincipalRelation(
 			final OrgPrincipalCreateRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("InsertOrgPrincipalRelation"));
		initialize(_dataservice);
		OrgPrincipalAlerts _result = null;
		try {
			_result = (OrgPrincipalAlerts)new LockSupervisor() {
				public Object execute() {
					return _dataservice.InsertOrgPrincipalRelation(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "InsertOrgPrincipalRelation", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to getOrgPrinciplarelations on IPMDataService
	 */
	public OrgPrincipalResponse getOrgPrinciplarelations(
 			final OrgPrincipalRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("getOrgPrinciplarelations"));
		initialize(_dataservice);
		OrgPrincipalResponse _result = null;
		try {
			_result = (OrgPrincipalResponse)new LockSupervisor() {
				public Object execute() {
					return _dataservice.getOrgPrinciplarelations(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "getOrgPrinciplarelations", _result, true);
		}
		return _result;
	}

	/*
	 * Delegating method to ValidateOrgPrincipalRelation on IPMDataService
	 */
	public OrgPrincipalAlerts ValidateOrgPrincipalRelation(
 			final OrgPrincipalCreateRequest Parameter1) {
		final IPMDataServiceImpl _dataservice = new IPMDataServiceImpl(getConfigurationName("ValidateOrgPrincipalRelation"));
		initialize(_dataservice);
		OrgPrincipalAlerts _result = null;
		try {
			_result = (OrgPrincipalAlerts)new LockSupervisor() {
				public Object execute() {
					return _dataservice.ValidateOrgPrincipalRelation(
 							Parameter1);
				}
			}.executeWithReadLock();
		} catch (Throwable e) {
			_dataservice.rollback();
			if (e instanceof RuntimeException)
				throw (RuntimeException)e;
			throw new RuntimeException(e);
		} finally {
		  shutdown(_dataservice, "ValidateOrgPrincipalRelation", _result, true);
		}
		return _result;
	}
}
